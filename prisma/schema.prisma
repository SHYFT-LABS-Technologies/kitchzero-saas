// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  BRANCH_ADMIN
}

enum WasteReason {
  SPOILAGE
  OVERPRODUCTION
  PLATE_WASTE
  BUFFET_LEFTOVER
}

enum Unit {
  kg
  g
  pieces
  liters
  portions
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReviewAction {
  CREATE
  UPDATE
  DELETE
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String
  role     Role
  branchId String?
  branch   Branch? @relation(fields: [branchId], references: [id])
  
  // Relations
  sessions         UserSession[]
  wasteLogReviews  WasteLogReview[] @relation("ReviewCreator")
  approvedReviews  WasteLogReview[] @relation("ReviewApprover")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Branch {
  id       String @id @default(cuid())
  name     String @unique
  location String
  
  // Relations
  users     User[]
  inventory Inventory[]
  wasteLogs WasteLog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branches")
}

model Inventory {
  id           String   @id @default(cuid())
  itemName     String
  quantity     Decimal
  unit         Unit
  expiryDate   DateTime
  purchaseCost Decimal
  branchId     String
  branch       Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([branchId])
  @@index([expiryDate])
  @@map("inventory")
}

model WasteLog {
  id       String      @id @default(cuid())
  itemName String
  quantity Decimal
  unit     Unit
  value    Decimal
  reason   WasteReason
  photo    String?
  branchId String
  branch   Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  
  // Relations
  reviews WasteLogReview[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([branchId])
  @@index([createdAt])
  @@index([reason])
  @@map("waste_logs")
}

model WasteLogReview {
  id           String       @id @default(cuid())
  wasteLogId   String?
  wasteLog     WasteLog?    @relation(fields: [wasteLogId], references: [id], onDelete: Cascade)
  action       ReviewAction
  status       ReviewStatus @default(PENDING)
  originalData Json?
  newData      Json?
  reason       String?
  reviewNotes  String?
  
  // Relations
  createdBy   String
  creator     User    @relation("ReviewCreator", fields: [createdBy], references: [id])
  approvedBy  String?
  approver    User?   @relation("ReviewApprover", fields: [approvedBy], references: [id])
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  reviewedAt DateTime?

  @@index([status])
  @@index([createdBy])
  @@index([createdAt])
  @@map("waste_log_reviews")
}

// Security Tables
model UserSession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
  @@index([lastActivity])
  @@map("user_sessions")
}

model RateLimit {
  id           String   @id @default(cuid())
  identifier   String   // user:123 or ip:192.168.1.1
  endpoint     String   // login, api_read, api_write, etc.
  requestCount Int      @default(1)
  windowStart  DateTime
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([identifier, endpoint, windowStart])
  @@index([identifier, endpoint])
  @@index([expiresAt])
  @@map("rate_limits")
}

model LoginAttempt {
  id            String   @id @default(cuid())
  username      String
  clientIp      String
  success       Boolean
  failureReason String?
  createdAt     DateTime @default(now())

  @@index([username, createdAt])
  @@index([clientIp, createdAt])
  @@index([createdAt])
  @@map("login_attempts")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  resource   String
  resourceId String
  userId     String?
  username   String?
  userRole   String?
  branchId   String?
  details    Json?
  timestamp  DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@map("audit_logs")
}